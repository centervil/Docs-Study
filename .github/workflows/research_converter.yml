name: 研究資料変換パイプライン

on:
  push:
    paths:
      - 'research/**/*.md'
    branches:
      - main
  workflow_dispatch:

jobs:
  convert-research-to-note:
    name: 研究資料をnote記事形式に変換
    runs-on: ubuntu-latest
    
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Pythonをセットアップ
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 依存関係のインストール
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: 変更された研究ファイルを特定
        id: changed-files
        run: |
          # 削除されたファイルを除外して変更されたファイルのみを検出
          CHANGED_FILES=$(git diff --name-only --diff-filter=d HEAD^ HEAD | grep '^research/.*\.md$' || echo "")
          
          # 一行ずつ表示
          echo "変更されたファイル:"
          echo "$CHANGED_FILES" | tr ' ' '\n'
          
          # 出力を適切な形式で設定
          {
            echo "files<<EOF"
            echo "$CHANGED_FILES"
            echo "EOF"
          } >> $GITHUB_OUTPUT
      
      - name: 研究ファイルを変換
        if: steps.changed-files.outputs.files != ''
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          # 変更された各ファイルに対して変換を実行
          for file in $(echo "${{ steps.changed-files.outputs.files }}")
          do
            echo "変換処理: $file"
            python note-converter/scripts/note_converter.py "$file"
          done
      
      - name: 変換結果をコミット
        if: steps.changed-files.outputs.files != ''
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
          # note-articlesディレクトリの変更をステージング
          git add note-articles/
          
          # 変更があればコミットとプッシュ
          if git diff --staged --quiet; then
            echo "コミットする変更がありません"
          else
            git commit -m "研究ファイルからnote記事を自動生成 [skip ci]"
            git push
          fi 